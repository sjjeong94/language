[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "oven-compiler"
version = "0.1.1"
description = "Python-to-MLIR compiler for GPU kernel development and mathematical computing"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Sinjin Jeong", email = "sjjeong94@gmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Compilers",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Hardware",
    "Topic :: Software Development :: Code Generators",
]
keywords = ["mlir", "compiler", "gpu", "python", "cuda", "kernel", "vectorization", "mathematical-computing", "llvm"]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "black",
    "flake8",
    "mypy",
]
test = [
    "pytest>=6.0",
    "pytest-cov",
]

[project.urls]
Homepage = "https://github.com/sjjeong94/language"
Repository = "https://github.com/sjjeong94/language"
Issues = "https://github.com/sjjeong94/language/issues"

[project.scripts]
oven = "oven.cli:main"

[tool.setuptools.packages.find]
include = ["oven*"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Configure coverage if using pytest-cov
[tool.coverage.run]
source = ["oven"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
